#include <string.h>
#include <omnetpp.h>
#include "Message_m.h"

#define ROOT "a"
#define GATENAME "gate$o"
#define GATENAME_i "gate$i"

#define PROBE new CMessage("Probe",1)
#define ACK new cMessage("Ack",2)
#define REJECT new cMessage("Reject")

#define PROBECODE 1
#define ACKCODE 2
#define REJECTCODE 0

using namespace omnetpp;

class FST : public cSimpleModule
{
private:

    bool hasParent;
    int gateIndex;
    int gateId;
    int messageCode;
    std::vector<std::string> children;

protected:
    virtual Message *generateMessage(const char *name,short int kind);
    virtual void initialize() override;
    virtual void handleMessage(cMessage *msg) override;

};

Define_Module(FST);


void FST::initialize()
{
    hasParent = false;
    if (strcmp(ROOT,getName()) == 0) {
        hasParent = true;
        Message *msg = generateMessage("Probe", 2);
        scheduleAt(0.0, msg);
    }
}
void FST::handleMessage(cMessage *msg)
{
    switch(messageCode){
    case (PROBECODE):
          gateId =  msg->getArrivalGateId();
                if( gateId != -1){
                    gateIndex = msg->getArrivalGate()->getIndex();
                    if(hasParent == false){
                        hasParent = true;
                        send(generateMessage("Ack", 1), GATENAME, gateIndex);
                        cDisplayString& arrivalDispStr = gate(GATENAME, gateIndex)->getDisplayString();
                        arrivalDispStr.parse("ls=blue,3");

                        for(int i = 0; i < this->gateCount() / 2; i++){
                                if(msg->arrivedOn(GATENAME_i, i)){continue;}
                                send(generateMessage("Probe", 2), GATENAME, i);
                        }
                    }else{
                        send(REJECT, GATENAME, gateIndex);
                    }
                }else{

                    for(int i = 0; i < this->gateCount() / 2; i++){
                            if(msg->arrivedOn(GATENAME_i, i)){continue;}
                            send(generateMessage("Probe", 2),GATENAME, i);
                    }
                }
                break;
    case (ACKCODE):
        children.push_back(msg->getArrivalGate()->getPreviousGate()->getOwner()->getName());
                cDisplayString& arrivalDispStr = gate(GATENAME, msg->getArrivalGate()->getIndex())->getDisplayString();
                arrivalDispStr.parse("ls=green,5");

                EV << getName() << "'s childs: ";
                for(int i = 0; i < children.size(); i++){
                    EV << children.at(i) << " , ";
                }
                EV << endl;
                break;
    }
}

Message *FST::generateMessage(const char *name,short int kind)
{

     Message *msg = new Message(name,kind);
    if(strcmp(name, "Probe") == 0){
        msg->setMessageCode(1);
    }else if(strcmp(name,"Ack") == 0){
        msg->setMessageCode(2);
    }else{
        msg->setMessageCode(2);
    }
    return msg;
}

